#!/usr/bin/env python

Import("env")
Import("env_modules")

env_physx = env_modules.Clone()

# Thirdparty source files

if env["builtin_physx"]:
    thirdparty_dir = "#thirdparty/physx/"
    thirdparty_source_dir = thirdparty_dir + "source/"

    # PhysX defines
    env_physx.Append(CPPDEFINES=["PX_PHYSX_STATIC_LIB", "PX_COOKING", "DISABLE_CUDA_PHYSX"])

    if env["target"] == "debug":
        env_physx.Append(CPPDEFINES=["NDEBUG", "PX_DEBUG=1", "PX_CHECKED=1", "PX_SUPPORT_PVD=1"])
    elif env["target"] == "release_debug":
        env_physx.Append(CPPDEFINES=["NDEBUG", "PX_DEBUG=0", "PX_CHECKED=1", "PX_SUPPORT_PVD=1"])
    else:
        env_physx.Append(CPPDEFINES=["NDEBUG", "PX_DEBUG=0", "PX_CHECKED=0", "PX_SUPPORT_PVD=0"])

    # PhysX module includes
    thirdparty_includes = [
        thirdparty_dir,
        thirdparty_dir + "/include",
    ]

    env_physx.Prepend(CPPPATH=thirdparty_includes)

    # PhysX source includes
    physx_src_includes = [
        "common/src",
        "foundation/include",
        "geomutils/include",
        "geomutils/src",
        "geomutils/src/ccd",
        "geomutils/src/common",
        "geomutils/src/contact",
        "geomutils/src/convex",
        "geomutils/src/distance",
        "geomutils/src/gjk",
        "geomutils/src/hf",
        "geomutils/src/intersection",
        "geomutils/src/mesh",
        "geomutils/src/pcm",
        "geomutils/src/sweep",
        "lowlevel/api/include",
        "lowlevel/common/include/collision",
        "lowlevel/common/include/pipeline",
        "lowlevel/common/include/utils",
        "lowlevel/software/include",
        "lowlevelaabb/include",
        "lowleveldynamics/include",
        "physx/src",
        "physx/src/buffering",
        "physx/src/device",
        "physxcooking/src",
        "physxcooking/src/convex",
        "physxcooking/src/mesh",
        "physxextensions/src",
        "physxextensions/src/serialization/File",
        "physxextensions/src/serialization/Xml",
        "physxmetadata/core/include",
        "physxmetadata/extensions/include",
        "pvd/include",
        "scenequery/include",
        "simulationcontroller/include",
        "simulationcontroller/src",
    ]

    thirdparty_source_includes = [thirdparty_source_dir + dir for dir in physx_src_includes]

    # PhysX source
    physx_src = [
        "common/src/CmMathUtils.cpp",
        "common/src/CmPtrTable.cpp",
        "common/src/CmRadixSort.cpp",
        "common/src/CmRadixSortBuffered.cpp",
        "common/src/CmRenderOutput.cpp",
        "common/src/CmVisualization.cpp",
        "foundation/src/PsAllocator.cpp",
        "foundation/src/PsFoundation.cpp",
        "foundation/src/PsMathUtils.cpp",
        "foundation/src/PsString.cpp",
        "foundation/src/PsTempAllocator.cpp",
        "geomutils/src/ccd/GuCCDSweepConvexMesh.cpp",
        "geomutils/src/ccd/GuCCDSweepPrimitives.cpp",
        "geomutils/src/common/GuBarycentricCoordinates.cpp",
        "geomutils/src/common/GuSeparatingAxes.cpp",
        "geomutils/src/contact/GuContactBoxBox.cpp",
        "geomutils/src/contact/GuContactCapsuleBox.cpp",
        "geomutils/src/contact/GuContactCapsuleCapsule.cpp",
        "geomutils/src/contact/GuContactCapsuleConvex.cpp",
        "geomutils/src/contact/GuContactCapsuleMesh.cpp",
        "geomutils/src/contact/GuContactConvexConvex.cpp",
        "geomutils/src/contact/GuContactConvexMesh.cpp",
        "geomutils/src/contact/GuContactPlaneBox.cpp",
        "geomutils/src/contact/GuContactPlaneCapsule.cpp",
        "geomutils/src/contact/GuContactPlaneConvex.cpp",
        "geomutils/src/contact/GuContactPolygonPolygon.cpp",
        "geomutils/src/contact/GuContactSphereBox.cpp",
        "geomutils/src/contact/GuContactSphereCapsule.cpp",
        "geomutils/src/contact/GuContactSphereMesh.cpp",
        "geomutils/src/contact/GuContactSpherePlane.cpp",
        "geomutils/src/contact/GuContactSphereSphere.cpp",
        "geomutils/src/contact/GuFeatureCode.cpp",
        "geomutils/src/convex/GuBigConvexData.cpp",
        "geomutils/src/convex/GuConvexHelper.cpp",
        "geomutils/src/convex/GuConvexMesh.cpp",
        "geomutils/src/convex/GuConvexSupportTable.cpp",
        "geomutils/src/convex/GuConvexUtilsInternal.cpp",
        "geomutils/src/convex/GuHillClimbing.cpp",
        "geomutils/src/convex/GuShapeConvex.cpp",
        "geomutils/src/distance/GuDistancePointBox.cpp",
        "geomutils/src/distance/GuDistancePointTriangle.cpp",
        "geomutils/src/distance/GuDistanceSegmentBox.cpp",
        "geomutils/src/distance/GuDistanceSegmentSegment.cpp",
        "geomutils/src/distance/GuDistanceSegmentTriangle.cpp",
        "geomutils/src/gjk/GuEPA.cpp",
        "geomutils/src/gjk/GuGJKSimplex.cpp",
        "geomutils/src/GuAABBTreeBuild.cpp",
        "geomutils/src/GuBounds.cpp",
        "geomutils/src/GuBox.cpp",
        "geomutils/src/GuBVHStructure.cpp",
        "geomutils/src/GuCapsule.cpp",
        "geomutils/src/GuCCTSweepTests.cpp",
        "geomutils/src/GuGeometryUnion.cpp",
        "geomutils/src/GuInternal.cpp",
        "geomutils/src/GuMeshFactory.cpp",
        "geomutils/src/GuOverlapTests.cpp",
        "geomutils/src/GuRaycastTests.cpp",
        "geomutils/src/GuSerialize.cpp",
        "geomutils/src/GuSweepMTD.cpp",
        "geomutils/src/GuSweepSharedTests.cpp",
        "geomutils/src/GuSweepTests.cpp",
        "geomutils/src/hf/GuHeightField.cpp",
        "geomutils/src/hf/GuHeightFieldUtil.cpp",
        "geomutils/src/hf/GuOverlapTestsHF.cpp",
        "geomutils/src/hf/GuSweepsHF.cpp",
        "geomutils/src/intersection/GUIntersectionBoxBox.cpp",
        "geomutils/src/intersection/GUIntersectionCapsuleTriangle.cpp",
        "geomutils/src/intersection/GUIntersectionEdgeEdge.cpp",
        "geomutils/src/intersection/GUIntersectionRayBox.cpp",
        "geomutils/src/intersection/GUIntersectionRayCapsule.cpp",
        "geomutils/src/intersection/GUIntersectionRaySphere.cpp",
        "geomutils/src/intersection/GUIntersectionSphereBox.cpp",
        "geomutils/src/intersection/GUIntersectionTriangleBox.cpp",
        "geomutils/src/mesh/GuBV32.cpp",
        "geomutils/src/mesh/GuBV32Build.cpp",
        "geomutils/src/mesh/GuBV4.cpp",
        "geomutils/src/mesh/GuBV4_AABBSweep.cpp",
        "geomutils/src/mesh/GuBV4_BoxOverlap.cpp",
        "geomutils/src/mesh/GuBV4_CapsuleSweep.cpp",
        "geomutils/src/mesh/GuBV4_CapsuleSweepAA.cpp",
        "geomutils/src/mesh/GuBV4_OBBSweep.cpp",
        "geomutils/src/mesh/GuBV4_Raycast.cpp",
        "geomutils/src/mesh/GuBV4_SphereOverlap.cpp",
        "geomutils/src/mesh/GuBV4_SphereSweep.cpp",
        "geomutils/src/mesh/GuBV4Build.cpp",
        "geomutils/src/mesh/GuMeshQuery.cpp",
        "geomutils/src/mesh/GuMidphaseRTree.cpp",
        "geomutils/src/mesh/GuMidphaseBV4.cpp",
        "geomutils/src/mesh/GuOverlapTestsMesh.cpp",
        "geomutils/src/mesh/GuRTree.cpp",
        "geomutils/src/mesh/GuRTreeQueries.cpp",
        "geomutils/src/mesh/GuSweepsMesh.cpp",
        "geomutils/src/mesh/GuTriangleMesh.cpp",
        "geomutils/src/mesh/GuTriangleMeshBV4.cpp",
        "geomutils/src/mesh/GuTriangleMeshRTree.cpp",
        "geomutils/src/pcm/GuPCMContactBoxBox.cpp",
        "geomutils/src/pcm/GuPCMContactBoxConvex.cpp",
        "geomutils/src/pcm/GuPCMContactCapsuleBox.cpp",
        "geomutils/src/pcm/GuPCMContactCapsuleCapsule.cpp",
        "geomutils/src/pcm/GuPCMContactCapsuleConvex.cpp",
        "geomutils/src/pcm/GuPCMContactCapsuleHeightfield.cpp",
        "geomutils/src/pcm/GuPCMContactCapsuleMesh.cpp",
        "geomutils/src/pcm/GuPCMContactConvexCommon.cpp",
        "geomutils/src/pcm/GuPCMContactConvexConvex.cpp",
        "geomutils/src/pcm/GuPCMContactConvexHeightfield.cpp",
        "geomutils/src/pcm/GuPCMContactConvexMesh.cpp",
        "geomutils/src/pcm/GuPCMContactGenBoxConvex.cpp",
        "geomutils/src/pcm/GuPCMContactGenSphereCapsule.cpp",
        "geomutils/src/pcm/GuPCMContactPlaneBox.cpp",
        "geomutils/src/pcm/GuPCMContactPlaneCapsule.cpp",
        "geomutils/src/pcm/GuPCMContactPlaneConvex.cpp",
        "geomutils/src/pcm/GuPCMContactSphereBox.cpp",
        "geomutils/src/pcm/GuPCMContactSphereCapsule.cpp",
        "geomutils/src/pcm/GuPCMContactSphereConvex.cpp",
        "geomutils/src/pcm/GuPCMContactSphereHeightfield.cpp",
        "geomutils/src/pcm/GuPCMContactSphereMesh.cpp",
        "geomutils/src/pcm/GuPCMContactSpherePlane.cpp",
        "geomutils/src/pcm/GuPCMContactSphereSphere.cpp",
        "geomutils/src/pcm/GuPCMShapeConvex.cpp",
        "geomutils/src/pcm/GuPCMTriangleContactGen.cpp",
        "geomutils/src/pcm/GuPersistentContactManifold.cpp",
        "geomutils/src/sweep/GuSweepBoxBox.cpp",
        "geomutils/src/sweep/GuSweepBoxSphere.cpp",
        "geomutils/src/sweep/GuSweepBoxTriangle_FeatureBased.cpp",
        "geomutils/src/sweep/GuSweepBoxTriangle_SAT.cpp",
        "geomutils/src/sweep/GuSweepCapsuleBox.cpp",
        "geomutils/src/sweep/GuSweepCapsuleCapsule.cpp",
        "geomutils/src/sweep/GuSweepCapsuleTriangle.cpp",
        "geomutils/src/sweep/GuSweepSphereCapsule.cpp",
        "geomutils/src/sweep/GuSweepSphereSphere.cpp",
        "geomutils/src/sweep/GuSweepSphereTriangle.cpp",
        "geomutils/src/sweep/GuSweepTriangleUtils.cpp",
        "lowlevel/api/src/px_globals.cpp",
        "lowlevel/common/src/pipeline/PxcContactCache.cpp",
        "lowlevel/common/src/pipeline/PxcContactMethodImpl.cpp",
        "lowlevel/common/src/pipeline/PxcMaterialHeightfield.cpp",
        "lowlevel/common/src/pipeline/PxcMaterialMesh.cpp",
        "lowlevel/common/src/pipeline/PxcMaterialMethodImpl.cpp",
        "lowlevel/common/src/pipeline/PxcMaterialShape.cpp",
        "lowlevel/common/src/pipeline/PxcNpBatch.cpp",
        "lowlevel/common/src/pipeline/PxcNpCacheStreamPair.cpp",
        "lowlevel/common/src/pipeline/PxcNpContactPrepShared.cpp",
        "lowlevel/common/src/pipeline/PxcNpMemBlockPool.cpp",
        "lowlevel/common/src/pipeline/PxcNpThreadContext.cpp",
        "lowlevel/software/src/PxsCCD.cpp",
        "lowlevel/software/src/PxsContactManager.cpp",
        "lowlevel/software/src/PxsContext.cpp",
        "lowlevel/software/src/PxsDefaultMemoryManager.cpp",
        "lowlevel/software/src/PxsIslandSim.cpp",
        "lowlevel/software/src/PxsMaterialCombiner.cpp",
        "lowlevel/software/src/PxsNphaseImplementationContext.cpp",
        "lowlevel/software/src/PxsSimpleIslandManager.cpp",
        "lowlevelaabb/src/BpAABBManager.cpp",
        "lowlevelaabb/src/BpBroadPhase.cpp",
        "lowlevelaabb/src/BpBroadPhaseABP.cpp",
        "lowlevelaabb/src/BpBroadPhaseMBP.cpp",
        "lowlevelaabb/src/BpBroadPhaseSap.cpp",
        "lowlevelaabb/src/BpBroadPhaseSapAux.cpp",
        "lowlevelaabb/src/BpBroadPhaseShared.cpp",
        "lowlevelaabb/src/BpSAPTasks.cpp",
        "lowleveldynamics/src/DyArticulation.cpp",
        "lowleveldynamics/src/DyArticulationContactPrep.cpp",
        "lowleveldynamics/src/DyArticulationContactPrepPF.cpp",
        "lowleveldynamics/src/DyArticulationHelper.cpp",
        "lowleveldynamics/src/DyArticulationSIMD.cpp",
        "lowleveldynamics/src/DyConstraintPartition.cpp",
        "lowleveldynamics/src/DyConstraintSetup.cpp",
        "lowleveldynamics/src/DyConstraintSetupBlock.cpp",
        "lowleveldynamics/src/DyContactPrep.cpp",
        "lowleveldynamics/src/DyContactPrep4.cpp",
        "lowleveldynamics/src/DyContactPrep4PF.cpp",
        "lowleveldynamics/src/DyContactPrepPF.cpp",
        "lowleveldynamics/src/DyDynamics.cpp",
        "lowleveldynamics/src/DyFeatherstoneArticulation.cpp",
        "lowleveldynamics/src/DyFeatherstoneForwardDynamic.cpp",
        "lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp",
        "lowleveldynamics/src/DyFrictionCorrelation.cpp",
        "lowleveldynamics/src/DyRigidBodyToSolverBody.cpp",
        "lowleveldynamics/src/DySolverConstraints.cpp",
        "lowleveldynamics/src/DySolverConstraintsBlock.cpp",
        "lowleveldynamics/src/DySolverControl.cpp",
        "lowleveldynamics/src/DySolverControlPF.cpp",
        "lowleveldynamics/src/DySolverPFConstraints.cpp",
        "lowleveldynamics/src/DySolverPFConstraintsBlock.cpp",
        "lowleveldynamics/src/DyTGSContactPrep.cpp",
        "lowleveldynamics/src/DyTGSContactPrepBlock.cpp",
        "lowleveldynamics/src/DyTGSDynamics.cpp",
        "lowleveldynamics/src/DyThreadContext.cpp",
        "physx/src/buffering/ScbActor.cpp",
        "physx/src/buffering/ScbAggregate.cpp",
        "physx/src/buffering/ScbBase.cpp",
        "physx/src/buffering/ScbScene.cpp",
        "physx/src/buffering/ScbShape.cpp",
        "physx/src/NpActor.cpp",
        "physx/src/NpAggregate.cpp",
        "physx/src/NpArticulation.cpp",
        "physx/src/NpArticulationJoint.cpp",
        "physx/src/NpArticulationJointReducedCoordinate.cpp",
        "physx/src/NpArticulationLink.cpp",
        "physx/src/NpArticulationReducedCoordinate.cpp",
        "physx/src/NpBatchQuery.cpp",
        "physx/src/NpConstraint.cpp",
        "physx/src/NpFactory.cpp",
        "physx/src/NpMaterial.cpp",
        "physx/src/NpPhysics.cpp",
        "physx/src/NpRigidDynamic.cpp",
        "physx/src/NpRigidStatic.cpp",
        "physx/src/NpScene.cpp",
        "physx/src/NpSceneQueries.cpp",
        "physx/src/NpShape.cpp",
        "physx/src/NpShapeManager.cpp",
        "physxcooking/src/Adjacencies.cpp",
        "physxcooking/src/BVHStructureBuilder.cpp",
        "physxcooking/src/convex/BigConvexDataBuilder.cpp",
        "physxcooking/src/convex/ConvexHullBuilder.cpp",
        "physxcooking/src/convex/ConvexHullLib.cpp",
        "physxcooking/src/convex/ConvexHullUtils.cpp",
        "physxcooking/src/convex/ConvexMeshBuilder.cpp",
        "physxcooking/src/convex/ConvexPolygonsBuilder.cpp",
        "physxcooking/src/convex/QuickHullConvexHullLib.cpp",
        "physxcooking/src/convex/VolumeIntegration.cpp",
        "physxcooking/src/Cooking.cpp",
        "physxcooking/src/CookingUtils.cpp",
        "physxcooking/src/EdgeList.cpp",
        "physxcooking/src/mesh/HeightFieldCooking.cpp",
        "physxcooking/src/mesh/MeshBuilder.cpp",
        "physxcooking/src/mesh/RTreeCooking.cpp",
        "physxcooking/src/mesh/TriangleMeshBuilder.cpp",
        "physxcooking/src/MeshCleaner.cpp",
        "physxcooking/src/Quantizer.cpp",
        "physxextensions/src/ExtContactJoint.cpp",
        "physxextensions/src/ExtCpuWorkerThread.cpp",
        "physxextensions/src/ExtD6Joint.cpp",
        "physxextensions/src/ExtDefaultCpuDispatcher.cpp",
        "physxextensions/src/ExtDefaultStreams.cpp",
        "physxextensions/src/ExtDistanceJoint.cpp",
        "physxextensions/src/ExtExtensions.cpp",
        "physxextensions/src/ExtFixedJoint.cpp",
        "physxextensions/src/ExtJoint.cpp",
        "physxextensions/src/ExtPrismaticJoint.cpp",
        "physxextensions/src/ExtRevoluteJoint.cpp",
        "physxextensions/src/ExtRigidBodyExt.cpp",
        "physxextensions/src/ExtSphericalJoint.cpp",
        "physxextensions/src/serialization/Xml/SnJointRepXSerializer.cpp",
        "physxextensions/src/serialization/Xml/SnRepXCoreSerializer.cpp",
        "physxmetadata/core/src/PxAutoGeneratedMetaDataObjects.cpp",
        "physxmetadata/extensions/src/PxExtensionAutoGeneratedMetaDataObjects.cpp",
        "physxmetadata/core/src/PxMetaDataObjects.cpp",
        "scenequery/src/SqAABBPruner.cpp",
        "scenequery/src/SqAABBTree.cpp",
        "scenequery/src/SqAABBTreeUpdateMap.cpp",
        "scenequery/src/SqBounds.cpp",
        "scenequery/src/SqBucketPruner.cpp",
        "scenequery/src/SqCompoundPruner.cpp",
        "scenequery/src/SqCompoundPruningPool.cpp",
        "scenequery/src/SqExtendedBucketPruner.cpp",
        "scenequery/src/SqIncrementalAABBPrunerCore.cpp",
        "scenequery/src/SqIncrementalAABBTree.cpp",
        "scenequery/src/SqPruningPool.cpp",
        "scenequery/src/SqPruningStructure.cpp",
        "scenequery/src/SqSceneQueryManager.cpp",
        "simulationcontroller/src/ScActorCore.cpp",
        "simulationcontroller/src/ScActorSim.cpp",
        "simulationcontroller/src/ScArticulationCore.cpp",
        "simulationcontroller/src/ScArticulationJointCore.cpp",
        "simulationcontroller/src/ScArticulationJointSim.cpp",
        "simulationcontroller/src/ScArticulationSim.cpp",
        "simulationcontroller/src/ScBodyCore.cpp",
        "simulationcontroller/src/ScBodySim.cpp",
        "simulationcontroller/src/ScConstraintCore.cpp",
        "simulationcontroller/src/ScConstraintGroupNode.cpp",
        "simulationcontroller/src/ScConstraintInteraction.cpp",
        "simulationcontroller/src/ScConstraintProjectionManager.cpp",
        "simulationcontroller/src/ScConstraintProjectionTree.cpp",
        "simulationcontroller/src/ScConstraintSim.cpp",
        "simulationcontroller/src/ScElementInteractionMarker.cpp",
        "simulationcontroller/src/ScElementSim.cpp",
        "simulationcontroller/src/ScInteraction.cpp",
        "simulationcontroller/src/ScNPhaseCore.cpp",
        "simulationcontroller/src/ScPhysics.cpp",
        "simulationcontroller/src/ScRigidCore.cpp",
        "simulationcontroller/src/ScRigidSim.cpp",
        "simulationcontroller/src/ScScene.cpp",
        "simulationcontroller/src/ScShapeCore.cpp",
        "simulationcontroller/src/ScShapeInteraction.cpp",
        "simulationcontroller/src/ScShapeSim.cpp",
        "simulationcontroller/src/ScSimStats.cpp",
        "simulationcontroller/src/ScSimulationController.cpp",
        "simulationcontroller/src/ScSqBoundsManager.cpp",
        "simulationcontroller/src/ScStaticCore.cpp",
        "simulationcontroller/src/ScTriggerInteraction.cpp",
        "task/src/TaskManager.cpp",
    ]

    # PhysX platform sources
    if env["platform"] == "windows":
        physx_src_platform = [
            "foundation/src/windows/PsWindowsAtomic.cpp",
            "foundation/src/windows/PsWindowsFPU.cpp",
            "foundation/src/windows/PsWindowsMutex.cpp",
            "foundation/src/windows/PsWindowsPrintString.cpp",
            "foundation/src/windows/PsWindowsSList.cpp",
            "foundation/src/windows/PsWindowsSocket.cpp",
            "foundation/src/windows/PsWindowsSync.cpp",
            "foundation/src/windows/PsWindowsThread.cpp",
            "foundation/src/windows/PsWindowsTime.cpp",
            "physx/src/device/windows/PhysXIndicatorWindows.cpp",
        ]
        physx_src.extend(physx_src_platform)
    else:
        physx_src_platform = [
            "foundation/src/unix/PsUnixAtomic.cpp",
            "foundation/src/unix/PsUnixFPU.cpp",
            "foundation/src/unix/PsUnixMutex.cpp",
            "foundation/src/unix/PsUnixPrintString.cpp",
            "foundation/src/unix/PsUnixSList.cpp",
            "foundation/src/unix/PsUnixSocket.cpp",
            "foundation/src/unix/PsUnixSync.cpp",
            "foundation/src/unix/PsUnixThread.cpp",
            "foundation/src/unix/PsUnixTime.cpp",
            "physx/src/device/linux/PhysXIndicatorLinux.cpp",
        ]
        physx_src.extend(physx_src_platform)

    # PhysX debug sources
    if env["target"] == "debug" or env["target"] == "release_debug":
        physx_src_debug = [
            "foundation/src/PsAssert.cpp",
            "geomutils/src/GuGeometryQuery.cpp",
            "geomutils/src/GuMTD.cpp",
            "physx/src/buffering/ScbScenePvdClient.cpp",
            "physx/src/NpPvdSceneQueryCollector.cpp",
            "physx/src/NpReadCheck.cpp",
            "physx/src/NpWriteCheck.cpp",
            "physx/src/PvdMetaDataPvdBinding.cpp",
            "physx/src/PvdPhysicsClient.cpp",
            "physxextensions/src/ExtPvd.cpp",
            "pvd/src/PxProfileEventImpl.cpp",
            "pvd/src/PxPvd.cpp",
            "pvd/src/PxPvdDataStream.cpp",
            "pvd/src/PxPvdDefaultSocketTransport.cpp",
            "pvd/src/PxPvdImpl.cpp",
            "pvd/src/PxPvdMemClient.cpp",
            "pvd/src/PxPvdObjectModelMetaData.cpp",
            "pvd/src/PxPvdObjectRegistrar.cpp",
            "pvd/src/PxPvdProfileZoneClient.cpp",
            "pvd/src/PxPvdUserRenderer.cpp",
            "simulationcontroller/src/ScIterators.cpp",
        ]
        physx_src.extend(physx_src_debug)

    thirdparty_sources = [thirdparty_source_dir + file for file in physx_src]

    env_thirdparty = env_physx.Clone()
    env_thirdparty.disable_warnings()
    env_thirdparty.add_source_files(env.modules_sources, thirdparty_sources)
    env_thirdparty.Prepend(CPPPATH=thirdparty_source_includes)

# Godot source files
env_physx.add_source_files(env.modules_sources, "*.cpp")
